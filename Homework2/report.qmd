---
title: "Homework 2: Entity Relation Diagrams"
author: "Kyle Watson"
format: html
toc: true
date: 02-10-2025
---

[View on github](https://github.com/watsonkh/CMSC608-Homework/tree/main/Homework2)


My general approach follows the one taught in class: nouns are entites and verbs are relationships. I expect I will have to refine the database design before finalizing.

# Library Management System
Picture a library that needs to manage books, members, and loans. Each book has a book ID, title, and author. Members have a member ID, name, and membership date. Loans have a loan ID, loan date, and return date. A member can borrow multiple books, and each book can be borrowed by multiple members over time. Each loan is associated with a single member borrowing a single book.

First I start by picking out the nouns/entities and attributes. I anticipate that a loan will need to reference both a member and a book, so I include a Book ID FK and a Member ID FK in the loan entity. The Loan entity is used to remove the M:N relation ship between members and books.

 - Book(ID, Title, Author)
 - Member(ID, Name, Membership Date)
 - Loan(ID, Loan Date, Return Date, Book ID, Member ID)


```{mermaid}
erDiagram
    MEMBER ||--o{ LOAN : "loans to"
    MEMBER {
        int ID
        String name
        Date membership_date
    }
     BOOK  ||--o{ LOAN: "loans a"
    LOAN {
        int ID
        Date loan_date
        Date return_date
        int book_id
        int member_id
    }
    BOOK {
        int ID
        String title
        String author
    }
```

```{dot}
graph ER {
	fontname="Helvetica,Arial,sans-serif"
	node [fontname="Helvetica,Arial,sans-serif"]
	edge [fontname="Helvetica,Arial,sans-serif"]
	layout=neato
	node [shape=box]; BOOK; MEMBER; LOAN;
	node [shape=ellipse]; {node [label="ID"] book_id; member_id; loan_id;}
		name; membership_date; title; author; loan_date; return_date; book_id; member_id;
	node [shape=diamond,style=filled,color=lightgrey]; "Lends a"; "Lends to";

    book_id -- BOOK;
    title -- BOOK;
    author -- BOOK;

    member_id -- MEMBER;
    name -- MEMBER;
    membership_date -- MEMBER;

    loan_id -- LOAN;
    return_date -- LOAN;
    loan_date -- LOAN;

    "Lends a" -- LOAN [label="n",color="black:white:black"];
    "Lends a" -- BOOK [label="1"];
    "Lends to" -- LOAN [label="n",color="black:white:black"];
    "Lends to" -- MEMBER [label="1"];

	label = "\n\nLibrary Management System";
	fontsize=20;
}
```


# Restaurant Reservation System
Envision a restaurant that wants to manage reservations, customers, and tables. Each reservation has a reservation ID, date, and time. Customers have a customer ID, name, and contact number. Tables have a table number, seating capacity, and location. A customer can make multiple reservations, and each reservation is for a single table. Each table can have multiple reservations over time, but each reservation is associated with only one customer.

This seems very similar to the Library Management System. Two entites have a M:N relationship and is handled by an associative entity.

 - Table(Table Number, Seating Capacity, Location)
 - Customer(ID, Name, Contact Number)
 - Reservation(ID, Reservation Date, Reservation Time, Table Number, Customer ID)

```{mermaid}
erDiagram
    Customer ||--o{ Reservation : "Makes"
    Customer {
        int ID
        String name
        String contact_number
    }
     Table  ||--o{ Reservation: "Reserved"
    Reservation {
        int ID
        Date reservation_date
        Time reservation_time
        int table_number
        int customer_id
    }
    Table {
        int table_number
        int seating_capacity
        String location
    }
```

```{dot}
graph ER {
	fontname="Helvetica,Arial,sans-serif"
	node [fontname="Helvetica,Arial,sans-serif"]
	edge [fontname="Helvetica,Arial,sans-serif"]
	layout=neato
	node [shape=box]; Table; Customer; Reservation;
	node [shape=ellipse]; {node [label="ID"] customer_id; reservation_id;}
		name; seating_capacity; location; reservation_date; reservation_time; contact_number; table_number;
	node [shape=diamond,style=filled,color=lightgrey]; "Reserved"; "Makes";

    table_number -- Table;
    seating_capacity -- Table;
    location -- Table;

    customer_id -- Customer;
    contact_number -- Customer;
    name -- Customer;

    reservation_id -- Reservation;
    reservation_time -- Reservation;
    reservation_date -- Reservation;

    "Reserved" -- Reservation [label="n",color="black:white:black"];
    "Reserved" -- Table [label="1"];
    "Makes" -- Reservation [label="n",color="black:white:black"];
    "Makes" -- Customer [label="1"];

	label = "\n\nRestaurant Reservation System";
	fontsize=20;
}
```


# Real Estate Listing System
Imagine a real estate agency that wants to track properties, agents, and clients. Each property has a property ID, address, and listing price. Agents have an agent ID, name, and contact information. Clients have a client ID, name, and budget. An agent can handle multiple properties, but each property is listed by a single agent. Clients can be interested in multiple properties, and each property can have multiple interested clients.

 - Property(ID, address, listing_price, managed_by)
 - Agent(ID, name, contact information)
 - Client(ID, name, budget)
 - ClientInterest(client_id, property_id)

This last scenario is similar to the previous two except there is an additional entity that is associated with one of the two in a M:N relationship. This additional entity has a 1:M relationship, so it does not need modification. The Client Interest entity was created to resolve the M:N relationship into two 1:M relationships. Now every relationship in this ER diagram is 1:M. 

```{mermaid}
erDiagram
    Agent ||--o{ Property : "Handles"
    Client ||--o{ ClientInterest: "Interested in"
    Property ||--o{ ClientInterest: "Interested by"
    Agent {
        int ID
        String name
        String contact_information
    }

    Property {
        int ID
        Address address
        int listing_price_cents
        int managed_by
    }

    Client {
        int ID
        String name
        int budget_cents
    }

    ClientInterest{
        int client_id
        int property_id
    }

```

```{dot}
graph ER {
	fontname="Helvetica,Arial,sans-serif"
	node [fontname="Helvetica,Arial,sans-serif"]
	edge [fontname="Helvetica,Arial,sans-serif"]
	layout=neato
	node [shape=box]; Property; Agent; Client; ClientInterest;
	node [shape=ellipse]; {node [label="ID"] property_id; pk_client_id; pk_agent_id;}
		agent_name; client_name; contact_info; listing_price; address; budget; agent_id; client_id; managed_by;
	node [shape=diamond,style=filled,color=lightgrey]; "Manages"; "Interested In"; "Interested By";

    Agent -- pk_agent_id;
    Agent -- name;
    Agent -- contact_info;
    Agent -- agent_name;

    Client -- pk_client_id;
    Client -- client_name;
    Client -- budget;

    ClientInterest -- client_id;
    ClientInterest -- agent_id;

    Property -- property_id;
    Property -- address;
    Property -- listing_price;
    Property -- managed_by;


    Agent -- "Manages";
    "Manages" -- Property;
    
    Property -- "Interested By";
    "Interested By" -- ClientInterest;

    Client -- "Interested In";
    "Interested In" -- ClientInterest;

    label = "\n\nReal Estate Listing System";
	fontsize=20;
}
```

# Conclusion

The biggest hurdle was resolving M:N relationships with an associative entity.